// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2025 14:57:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TemperatureControl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TemperatureControl_vlg_sample_tst(
	clk,
	reset,
	temperature,
	sampler_tx
);
input  clk;
input  reset;
input [7:0] temperature;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or temperature)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TemperatureControl_vlg_check_tst (
	cooler,
	crs,
	heater,
	sampler_rx
);
input  cooler;
input [1:0] crs;
input  heater;
input sampler_rx;

reg  cooler_expected;
reg [1:0] crs_expected;
reg  heater_expected;

reg  cooler_prev;
reg [1:0] crs_prev;
reg  heater_prev;

reg  cooler_expected_prev;
reg [1:0] crs_expected_prev;
reg  heater_expected_prev;

reg  last_cooler_exp;
reg [1:0] last_crs_exp;
reg  last_heater_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	cooler_prev = cooler;
	crs_prev = crs;
	heater_prev = heater;
end

// update expected /o prevs

always @(trigger)
begin
	cooler_expected_prev = cooler_expected;
	crs_expected_prev = crs_expected;
	heater_expected_prev = heater_expected;
end



// expected cooler
initial
begin
	cooler_expected = 1'bX;
end 
// expected crs[ 1 ]
initial
begin
	crs_expected[1] = 1'bX;
end 
// expected crs[ 0 ]
initial
begin
	crs_expected[0] = 1'bX;
end 

// expected heater
initial
begin
	heater_expected = 1'bX;
end 
// generate trigger
always @(cooler_expected or cooler or crs_expected or crs or heater_expected or heater)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cooler = %b | expected crs = %b | expected heater = %b | ",cooler_expected_prev,crs_expected_prev,heater_expected_prev);
	$display("| real cooler = %b | real crs = %b | real heater = %b | ",cooler_prev,crs_prev,heater_prev);
`endif
	if (
		( cooler_expected_prev !== 1'bx ) && ( cooler_prev !== cooler_expected_prev )
		&& ((cooler_expected_prev !== last_cooler_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cooler :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cooler_expected_prev);
		$display ("     Real value = %b", cooler_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cooler_exp = cooler_expected_prev;
	end
	if (
		( crs_expected_prev[0] !== 1'bx ) && ( crs_prev[0] !== crs_expected_prev[0] )
		&& ((crs_expected_prev[0] !== last_crs_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port crs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", crs_expected_prev);
		$display ("     Real value = %b", crs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_crs_exp[0] = crs_expected_prev[0];
	end
	if (
		( crs_expected_prev[1] !== 1'bx ) && ( crs_prev[1] !== crs_expected_prev[1] )
		&& ((crs_expected_prev[1] !== last_crs_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port crs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", crs_expected_prev);
		$display ("     Real value = %b", crs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_crs_exp[1] = crs_expected_prev[1];
	end
	if (
		( heater_expected_prev !== 1'bx ) && ( heater_prev !== heater_expected_prev )
		&& ((heater_expected_prev !== last_heater_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port heater :: @time = %t",  $realtime);
		$display ("     Expected value = %b", heater_expected_prev);
		$display ("     Real value = %b", heater_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_heater_exp = heater_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TemperatureControl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg [7:0] temperature;
// wires                                               
wire cooler;
wire [1:0] crs;
wire heater;

wire sampler;                             

// assign statements (if any)                          
TemperatureControl i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.cooler(cooler),
	.crs(crs),
	.heater(heater),
	.reset(reset),
	.temperature(temperature)
);

// reset
initial
begin
	reset = 1'b0;
	reset = #520000 1'b1;
	reset = #40000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// temperature[ 7 ]
initial
begin
	temperature[7] = 1'b1;
	temperature[7] = #40000 1'b0;
end 
// temperature[ 6 ]
initial
begin
	temperature[6] = 1'b1;
	temperature[6] = #40000 1'b0;
end 
// temperature[ 5 ]
initial
begin
	temperature[5] = 1'b1;
	temperature[5] = #40000 1'b0;
	temperature[5] = #80000 1'b1;
	temperature[5] = #40000 1'b0;
	temperature[5] = #180000 1'b1;
	temperature[5] = #280000 1'b0;
end 
// temperature[ 4 ]
initial
begin
	temperature[4] = 1'b1;
	temperature[4] = #40000 1'b0;
	temperature[4] = #80000 1'b1;
	temperature[4] = #40000 1'b0;
	temperature[4] = #80000 1'b1;
	temperature[4] = #40000 1'b0;
	temperature[4] = #60000 1'b1;
	temperature[4] = #280000 1'b0;
end 
// temperature[ 3 ]
initial
begin
	temperature[3] = 1'b1;
	temperature[3] = #40000 1'b0;
	temperature[3] = #300000 1'b1;
	temperature[3] = #280000 1'b0;
end 
// temperature[ 2 ]
initial
begin
	temperature[2] = 1'b0;
	temperature[2] = #240000 1'b1;
	temperature[2] = #40000 1'b0;
	temperature[2] = #60000 1'b1;
	temperature[2] = #280000 1'b0;
end 
// temperature[ 1 ]
initial
begin
	temperature[1] = 1'b1;
	temperature[1] = #40000 1'b0;
	temperature[1] = #80000 1'b1;
	temperature[1] = #40000 1'b0;
end 
// temperature[ 0 ]
initial
begin
	temperature[0] = 1'b1;
	temperature[0] = #40000 1'b0;
end 

TemperatureControl_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.temperature(temperature),
	.sampler_tx(sampler)
);

TemperatureControl_vlg_check_tst tb_out(
	.cooler(cooler),
	.crs(crs),
	.heater(heater),
	.sampler_rx(sampler)
);
endmodule

